cartographer_rosbag_validate -bag_filename your_bag.bag

bag 파일로 저장

roslaunch cartographer_ros my_robot.launch bag_filename:=/path/to/your_bag.bag

bag 파일 불러오기

STELLA_REMOTE_PC_N2/stella_navigation/param/costmap_common_params_stella.yaml

obstacle_range: 4.5
raytrace_range: 3.5

footprint: [[-0.16, -0.2], [-0.16, 0.2], [0.16, 0.2], [0.16, -0.2]]
#robot_radius: 0.105

inflation_radius: 0.50
cost_scaling_factor: 2.0

map_type: costmap
observation_sources: scan
scan: {sensor_frame: base_scan, data_type: LaserScan, topic: scan, marking: true, clearing: true}

이것을 조절해서 내비게이션의 장애물 크기를 결정한다. 


좌표 이동프로그램

#! /usr/bin/env python3
​
import rospy
from geometry_msgs.msg import PoseStamped
from move_base_msgs.msg import MoveBaseActionResult
​
# coord_list = [[0, 0, 0, 1], [3, 0, -0.7, 0.7], [3, -1.5, 1, 0], [2, -3, -0.7, 0.7], [3.3, -3, 0, 1], [3.3, -5, -0.7, 0.7], [1, -5, 1, 0], [0, -2, 0.7, -0.7]]
coord_list = [[0, 0, 0, 1], [3, 0, -0.7, 0.7], [3, -1.5, 1, 0], [0, -1.5, 0.7, 0.7]]
​
def callback(data):
    rospy.init_node('slam_nav', anonymous=True)
    pub = rospy.Publisher('move_base_simple/goal', PoseStamped, queue_size=1)
    nav_msg = PoseStamped()
    nav_msg.header.frame_id = 'map'
    
    
    if data.status.status == 3:
        global cnt
        cnt += 1
        if cnt == len(coord_list):
            cnt = 0
        print('도착 ㅋㅋ루삥뽕')
        nav_msg.pose.position.x = coord_list[cnt][0]
        nav_msg.pose.position.y = coord_list[cnt][1]
​
        nav_msg.pose.orientation.z = coord_list[cnt][2]
        nav_msg.pose.orientation.w = coord_list[cnt][3]
        print('다음 ㄱㄱ씽!!!')
        pub.publish(nav_msg)
        
    
​
def listener():
    global cnt
    cnt = 0
    rospy.init_node('slam_nav', anonymous=True)
    pub = rospy.Publisher('move_base_simple/goal', PoseStamped, queue_size=1)
    
    rospy.Subscriber('move_base/result', MoveBaseActionResult, callback)
    nav_msg = PoseStamped()
    
    nav_msg.pose.position.x = coord_list[cnt][0]
    nav_msg.pose.position.y = coord_list[cnt][1]
​
    nav_msg.pose.orientation.z = coord_list[cnt][2]
    nav_msg.pose.orientation.w = coord_list[cnt][3]
    
    print('초기 위치 0, 0으로 이동합니다.')
    pub.publish(nav_msg)
    
    rospy.spin()
    
if __name__ == '__main__':
    listener()
​
# x_coord = 0
# y_coord = 0
​
# z_val = 0
# w_val = 1
​
​
​
​
​
# print('초기지점 이동')
# 
​
​
# while True:
#     rospy.init_node('slam_nav', anonymous=True)
#     pub = rospy.Publisher('move_base_simple/goal', PoseStamped, queue_size=1)
#     sub = rospy.Subscriber('move_base/result', MoveBaseActionResult, callback)
​
#     #2차 이동
#     print('2차 이동 변수 조정')
#     x_coord += 0.01
#     nav_msg.pose.position.x = x_coord
​
#     nav_sleep(3)
​



